import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
import os
from aiogram import Bot

API_TOKEN = os.environ.get("gith_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä—É–ø
groups = {
    "–ö–ù-22": [
        "1. –ê–ª–º–∞—î–≤ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –†–æ–º–∞–Ω–æ–≤–∏—á",
        "2. –ë–∞–±—ñ—é–∫ –ê—Ä—Ç–µ–º –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
        "3. –ë–µ–∑–¥–æ–ª—å–Ω–∏–π –ö–∏—Ä–∏–ª–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "4. –ë—î–ª—å—á–µ–Ω–∫–æ –í–ª–∞–¥–∏—Å–ª–∞–≤ –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
        "5. –ë–æ–º–∫–æ –î–∞–Ω–∏–ª–æ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á",
        "6. –ë—É—Ä—ñ–∫–æ –ì–ª—ñ–± –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á",
        "7. –í–∞–∫–∞—Ü—ñ—î–Ω–∫–æ –ù—ñ–∫—ñ—Ç–∞ –Ø—Ä–æ—Å–ª–∞–≤–æ–≤–∏—á",
        "8. –ì–æ–Ω—á–∞—Ä—É–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–≤—è—Ç–æ—Å–ª–∞–≤–æ–≤–∏—á",
        "9. –ì–æ—Ä—è—á–∫—ñ–≤—Å—å–∫–∏–π –ö–∏—Ä–∏–ª–æ –Ü–≥–æ—Ä–æ–≤–∏—á",
        "10. –î–æ–ª–∏–Ω–∫–æ –ê–Ω—Ç–æ–Ω –°—Ç–∞–Ω—ñ—Å–ª–∞–≤–æ–≤–∏—á",
        "11. –î–æ—Ä–æ—à–æ–∫ –û–ª–µ–Ω–∞ –û–ª–µ–≥—ñ–≤–Ω–∞",
        "12. –ó–∞—Å—è–¥—å–≤–æ–≤–∫ –ë–æ–≥–¥–∞–Ω –î–º–∏—Ç—Ä–æ–≤–∏—á",
        "13. –Ü–≤–∞–Ω—á–µ–Ω–∫–æ –î–º–∏—Ç—Ä–æ –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á",
        "14. –ö–∞–ª–∞—à–Ω–∏–∫ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á",
        "15. –ö–∞—Ç–∫–æ–≤ –û–ª–µ–≥ –î–∞–Ω–∏–ª–æ–≤–∏—á",
        "16. –ö—ñ—Ö–æ—Ç—å –ú–∞–∫—Å–∏–º –í—ñ–∫—Ç–æ—Ä–æ–≤–∏—á",
        "17. –ö—ñ—á—É—Ä–∞ –ú–∞–∫—Å–∏–º –ì—Ä–∏–≥–æ—Ä–æ–≤–∏—á",
        "18. –ö–æ—Ö–∞–Ω –Ü–≥–æ—Ä –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "19. –ö—Ä–∏—Ü—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä –í—ñ—Ç–∞–ª—ñ–π–æ–≤–∏—á",
        "20. –ö—É–∑–Ω—î—Ü–æ–≤ –ú–∏–∫–æ–ª–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "21. –ö—É—á–µ—Ä –î–µ–Ω–∏—Å –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á",
        "22. –õ–∞–≤—Ä–µ–Ω—Ç—å—î–≤ –û–ª–µ–∫—Å—ñ–π –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
        "23. –õ–æ–∑—ñ–Ω—Å—å–∫–∏–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
        "24. –û—Å–∞–¥—á–∏–π –í–ª–∞–¥–∏—Å–ª–∞–≤ –ö–æ—Å—Ç—è–Ω—Ç–∏–Ω–æ–≤–∏—á",
        "25. –ü–∞—â–µ–Ω–∫–æ –î–∞–Ω–∏–ª–æ –í—ñ—Ç–∞–ª—ñ–π–æ–≤–∏—á",
        "26. –ü–∏–ª–∏–ø–µ–Ω–∫–æ –í—ñ–∫—Ç–æ—Ä—ñ—è –°–µ—Ä–≥—ñ—ó–≤–Ω–∞",
        "27. –ü—ñ–≤–Ω–µ–Ω–∫–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –ú–∏—Ö–∞–π–ª–æ–≤–∏—á",
        "28. –†–µ—à–µ—Ç–∏—Ü—å–∫–∞ –ù–∞—Ç–∞–ª—ñ—è –°–µ—Ä–≥—ñ—ó–≤–Ω–∞",
        "29. –†—É–¥—å –Ü–≥–æ—Ä –í–∞–¥–∏–º–æ–≤–∏—á",
        "30. –†—è–±–æ–≤–æ–ª –í—Å–µ–≤–æ–ª–æ–¥ –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á",
        "31. –°–∫–æ–∫ –ö–∏—Ä–∏–ª–æ –Ü–≥–æ—Ä–æ–≤–∏—á",
        "32. –°—É—Ä–∂–µ–Ω–∫–æ –í–æ–ª–æ–¥–∏–º–∏—Ä –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "33. –¢–µ–ª—ñ–≥–∞ –ê–Ω—Ç–æ–Ω –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á",
        "34. –¢–∫–∞—á–µ–Ω–∫–æ –†–æ–º–∞–Ω –ï–¥—É–∞—Ä–¥–æ–≤–∏—á",
        "35. –§—ñ–¥—Ä—è –ú–∞–∫—Å–∏–º –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "36. –ß–∞–±–∞–Ω –û–ª–µ–∫—Å–∞–Ω–¥—Ä –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
        "37. –ß–µ—Ä–≤–æ–Ω–∏–π –Ñ–≥–æ—Ä –í–ª–∞–¥–∏—Å–ª–∞–≤–æ–≤–∏—á",
        "38. –©–∏—á–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á"
    ],
    "–ö–ù-23–º–±": [
        "1. –ë–∞–ª–∞–∫–∞–Ω –û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
        "2.  –†—è–±–æ–∫–æ–±–∏–ª–∞ –°–µ—Ä–≥—ñ–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"
    ],
    "–ö–Ü22-1": [],  # –Ω–æ–≤–∞ –≥—Ä—É–ø–∞, —Å—Ç—É–¥–µ–Ω—Ç–∏ –ø–æ–∫–∏ —â–æ –Ω–µ –¥–æ–¥–∞–Ω—ñ
    "–ö–Ü22-2": [],
    "–ö–Ü23–º–±": [],
    "–ö–ë22-1": [],
    "–ö–ë22-2": [],
    "–ö–ë23–º–±": []
}

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ (Persistent Menu)
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
    ]
    await bot.set_my_commands(commands)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ü—Ä–æ –±–æ—Ç–∞", callback_data="about")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø", callback_data="groups")],
            [InlineKeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏", callback_data="list_all")]
        ]
    )
    return keyboard

# /start ‚Äî –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# Callback "–ü—Ä–æ –±–æ—Ç–∞"
@dp.callback_query(lambda c: c.data == "about")
async def about_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    )
    await callback_query.message.edit_text(
        "–Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫—É—Ä–∞—Ç–æ—Ä—É: –º–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø–∏ —Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.",
        reply_markup=keyboard
    )
    await callback_query.answer()

# Callback "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏"
@dp.callback_query(lambda c: c.data == "list_all")
async def list_all_callback(callback_query: types.CallbackQuery):
    text = ""
    for group_name, students in groups.items():
        text += f"{group_name}:\n"
        text += "\n".join(students) + "\n\n"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    )
    await callback_query.message.edit_text(text.strip(), reply_markup=keyboard)
    await callback_query.answer()

# Callback "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø"
@dp.callback_query(lambda c: c.data == "groups")
async def groups_callback(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=group, callback_data=f"group:{group}")]
            for group in groups.keys()
        ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    )
    await callback_query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:", reply_markup=keyboard)
    await callback_query.answer()

# Callback –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≥—Ä—É–ø–∏
@dp.callback_query(lambda c: c.data.startswith("group:"))
async def group_callback(callback_query: types.CallbackQuery):
    group_name = callback_query.data.split(":")[1]
    student_list = "\n".join(groups[group_name])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="groups")]]
    )
    await callback_query.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ {group_name}:\n\n{student_list}",
        reply_markup=keyboard
    )
    await callback_query.answer()

# Callback –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_main")
async def back_main_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())
    await callback_query.answer()

async def main():
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
